{"version":3,"sources":["App.js","actions.js","types.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["App","state","text","date","Date","render_Reminders","reminders","props","map","className","reminder","key","id","moment","fromNow","onClick","remove_reminder","console","log","this","type","value","placeholder","onChange","e","setState","target","add_reminder","clear_reminder","Component","connect","action","Math","random","filter","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kSAKOA,G,iNACLC,MAAQ,CACNC,KAAK,GACLC,KAAM,IAAIC,M,EAEZC,iBAAmB,WAAM,IAChBC,EAAa,EAAKC,MAAlBD,UACP,GAAIA,GAAaA,EAAUE,IAC3B,OACG,wBAAIC,UAAU,cAEXH,EAAUE,IAAI,SAAAE,GACZ,OACE,wBAAKD,UAAU,kBAAkBE,IAAOD,EAASE,IAC/C,6BAAMF,EAASR,MACf,6BAAMW,IAAO,IAAIT,KAAKM,EAASP,OAAOW,WACtC,yBAAKL,UAAU,iBAAiBM,QAAS,kBAAI,EAAKR,MAAMS,gBAAgBN,EAASE,MAAjF,U,wEAQL,IAAD,OAGR,OAFEK,QAAQC,IAAIC,KAAKZ,OACjBU,QAAQC,IAAIC,KAAKlB,OAEjB,yBAAKQ,UAAU,kBACf,6BAAK,mDACL,2BAAOW,KAAK,OAAOX,UAAU,eAC7BY,MAAQF,KAAKlB,MAAMC,KACnBoB,YAAc,2BACdC,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACvB,KAAKsB,EAAEE,OAAOL,WAC/C,2BAAOD,KAAK,iBAAiBX,UAAU,eACvCY,MAAQF,KAAKlB,MAAMC,KACnBqB,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAS,CAACtB,KAAKqB,EAAEE,OAAOL,WAC/C,4BAAQD,KAAK,SAASX,UAAU,4BAChCM,QAAU,WACR,EAAKR,MAAMoB,aAAa,EAAK1B,MAAMC,KAAO,EAAKD,MAAME,MACrD,EAAKsB,SAAS,CAACvB,KAAM,GAAKC,KAAK,OAHjC,gBAOCgB,KAAKd,mBACN,4BACAU,QAAS,kBAAK,EAAKR,MAAMqB,kBACxBR,KAAK,SAASX,UAAU,4BAFzB,SAGA,mC,GAhDeoB,cAiEJC,cAAQ,SAAA7B,GACrB,MAAM,CACFK,UAAYL,IAGb,CAAC0B,aC1EsB,SAACzB,EAAOC,GAChC,IAAM4B,EAAS,CACXX,KCHoB,eDIpBlB,OACAC,QAIJ,OADAc,QAAQC,IAAI,eAAgBa,GACrBA,GDkEUf,gBC/DU,SAACJ,GAC5B,IAAMmB,EAAS,CACXX,KCbuB,kBDcvBR,MAIJ,OADAK,QAAQC,IAAI,kBAAmBa,GACxBA,GDwD4BH,eCrDT,WAC1B,IAAMG,EAAS,CACXX,KCtBsB,kBD2B1B,OADAH,QAAQC,IAAI,iBAAkBa,GACvBA,IDyCID,CAK0C9B,G,uBGhD1CM,EA1BG,WAAuB,IAAtBL,EAAqB,uDAAf,GAAK8B,EAAU,uCAChCzB,EAAY,KAChB,MDHwB,iBCGpByB,EAAOX,MACPd,EAAS,sBAAOL,GAAP,CAAe,CAACC,KAAO6B,EAAO7B,KAAOC,KAAO4B,EAAO5B,KAAOS,GAAKoB,KAAKC,YAC7EhB,QAAQC,IAAI,eAAiBa,GACtBzB,GDLgB,oBCSlByB,EAAOX,MACZd,EAAYL,EAAMiC,OAAO,SAAAxB,GAAQ,OAAIA,EAASE,KAAOmB,EAAOnB,KAC5DK,QAAQC,IAAI,eAAiBa,GACtBzB,GDXe,mBCcjByB,EAAOX,MACZd,EAAY,GACZW,QAAQC,IAAI,eAAiBa,GACtBzB,GAIAL,GCXKkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,UCRAC,EAAQC,YAAY/B,GAC1BgC,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAQ,kBAAC,EAAD,OAAoBI,SAASC,eAAe,SDsH/E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.68d099c7.chunk.js","sourcesContent":["import React ,{Component} from 'react';\nimport { add_reminder , remove_reminder , clear_reminder } from './actions';\nimport {connect} from 'react-redux';\nimport moment from 'moment';\nimport './App.css'; \nclass  App extends Component  {\n  state = {\n    text:'',\n    date: new Date()\n  }\n  render_Reminders = () =>{\n    const {reminders} = this.props;\n    if (reminders && reminders.map){\n    return(\n       <ul className=\"list-group\">\n        {\n          reminders.map(reminder => {\n            return(\n              <li  className=\"list-group-item\" key = {reminder.id} >\n                <div>{reminder.text}</div>\n                <div>{moment(new Date(reminder.date)).fromNow() }</div>\n                <div className=\"btn btn-danger\" onClick={()=>this.props.remove_reminder(reminder.id)}>X</div>\n              </li>\n            )\n          })\n        }\n      </ul>\n    )\n  } }\n  render(){\n    console.log(this.props);\n    console.log(this.state);\n  return (\n    <div className=\"App form-group\">\n    <div><h2>What should I do ?</h2></div>\n    <input type=\"text\" className=\"form-control\"\n    value ={this.state.text}\n    placeholder = \"what U think about ....?\" \n    onChange ={(e) => this.setState({text:e.target.value}) }/>\n    <input type=\"datetime-local\" className=\"form-control\"\n    value ={this.state.text}\n    onChange ={(e) => this.setState({date:e.target.value}) }   />\n    <button type=\"button\" className=\"btn btn-primary btn-block\"\n    onClick ={() => {\n      this.props.add_reminder(this.state.text , this.state.date)\n      this.setState({text: '' , date:''})\n     }\n      }>\n    Add Reminder</button>\n    {this.render_Reminders()}\n    <button\n    onClick={()=> this.props.clear_reminder()}\n     type=\"button\" className=\"btn btn-danger btn-block\">Clear</button>\n    <div></div>\n    </div>\n  );\n}\n}\n/* function mapDispatchToProps (dispatch){\n  return{\n    add_reminder:() =>{add_reminder}\n  }\n} */\n/* function mapStateToProps (state){\n  return{\n\n  \n  reminders : state \n}\n} */\nexport default connect(state=>{\n  return{\n      reminders : state \n    }\n    }\n   , {add_reminder , remove_reminder , clear_reminder}) (App);\n","import {ADD_REMINDER, REMOVE_REMINDER, CLEAR_REMINDER} from './types';\r\nexport const add_reminder = (text , date) => {\r\n    const action = {\r\n        type : ADD_REMINDER,\r\n        text,\r\n        date\r\n\r\n    }\r\n    console.log(\"Add Reminder\", action)\r\n    return action\r\n\r\n}\r\nexport const remove_reminder = (id) => {\r\n    const action = {\r\n        type : REMOVE_REMINDER ,\r\n        id\r\n\r\n    }\r\n    console.log(\"remove Reminder\", action)\r\n    return action\r\n\r\n}\r\nexport const clear_reminder = () => {\r\n    const action = {\r\n        type : CLEAR_REMINDER\r\n        \r\n\r\n    }\r\n    console.log(\"clear Reminder\", action)\r\n    return action\r\n\r\n}","export const ADD_REMINDER = \"ADD_REMINDER\";\r\nexport const REMOVE_REMINDER = \"REMOVE_REMINDER\";\r\nexport const CLEAR_REMINDER = \"CLEAR_REMINDER\";\r\n","import {ADD_REMINDER , REMOVE_REMINDER , CLEAR_REMINDER} from '../types'\r\nconst reminders = (state=[] , action) =>{\r\n    let reminders = null;\r\n    if (action.type === ADD_REMINDER ){\r\n        reminders = [...state , {text : action.text , date : action.date , id : Math.random()}]\r\n        console.log(\"from reducer\" , action)\r\n        return reminders\r\n\r\n   \r\n    }\r\n    else if( action.type === REMOVE_REMINDER  ){\r\n        reminders = state.filter(reminder => reminder.id !== action.id)\r\n        console.log(\"from reducer\" , action)\r\n        return reminders\r\n\r\n    }\r\n    else if( action.type === CLEAR_REMINDER ){\r\n        reminders = []\r\n        console.log(\"from reducer\" , action)\r\n        return reminders\r\n\r\n    }\r\n    else{\r\n        return state\r\n    }\r\n\r\n}\r\nexport default reminders;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport reminder from './reducers/reducer'\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\n\nconst store = createStore(reminder);\nReactDOM.render(<Provider store={store} ><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}